AWSTemplateFormatVersion: "2010-09-09"
Description: Real-time GenAI Chat App with Lambda, Bedrock, and WebSocket API

# ----------------------------------------------------------------
# Parameters
# - このテンプレートをデプロイする際に外部から与えることができる値を定義します。
# - ここでは、リソースに一貫した名前を付けるためのプロジェクト名を定義しています。
# ----------------------------------------------------------------
Parameters:
  ProjectName:
    Type: String
    Default: "my-llm-app"
    Description: "Project name for resource tagging and naming. Must be lowercase and contain only letters and hyphens."
    AllowedPattern: "^[a-z0-9-]+$"
  LambdaCodeS3Bucket:
    Type: String
    Description: "S3 bucket where Lambda function code is stored."
  LambdaCodeS3Key:
    Type: String
    Description: "S3 key for the Lambda function code zip file."

Resources:
  # =================================================================
  # S3 Bucket for Frontend
  # - フロントエンドの静的ファイル（HTML, CSS, JavaScript）をホスティングするためのS3バケットです。
  # - WebsiteConfigurationを有効にすることで、S3バケットをWebサーバーのように振る舞わせます。
  # - PublicAccessBlockConfigurationで意図しない公開を防ぎ、CloudFront経由のアクセスのみを許可する構成の基礎となります。
  # =================================================================
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${ProjectName}-frontend-${AWS::AccountId}"
      Tags:
        - Key: "Project"
          Value: !Ref ProjectName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html

  # =================================================================
  # CloudFront Distribution
  # - S3バケットのコンテンツを高速かつ安全に配信するためのCDN（コンテンツデリバリネットワーク）です。
  # - HTTPS通信を強制し、ユーザーに近いエッジロケーションからコンテンツを配信することで、パフォーマンスを向上させます。
  # - OAC (Origin Access Control) を設定することで、S3バケットへの直接アクセスをブロックし、セキュリティを強化します。
  # - PriceClass_100 を指定することで、利用料金を北米・欧州のレートに限定し、コストを削減します。
  # =================================================================
  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${ProjectName}-OAC"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt FrontendBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: "" # OAC is used instead
            OriginAccessControlId: !Ref CloudFrontOriginAccessControl
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6" # CachingOptimized
        PriceClass: PriceClass_100 # North America and Europe
      Tags:
        - Key: "Project"
          Value: !Ref ProjectName

  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub "${FrontendBucket.Arn}/*"
            Condition:
              StringEquals:
                "AWS:SourceArn": !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}"

  # =================================================================
  # DynamoDB Tables
  # - WebSocketの接続情報とチャット履歴を保存するためのNoSQLデータベースです。
  # - BillingMode: PAY_PER_REQUEST は、リクエスト量に応じた課金（オンデマンド）で、アクセスが少ない開発段階でのコストを抑えます。
  # - TimeToLiveSpecification (TTL) を有効にすることで、古いデータを自動的に削除し、ストレージコストの増大を防ぎます。
  # =================================================================
  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${ProjectName}-Connections"
      Tags:
        - Key: "Project"
          Value: !Ref ProjectName
      AttributeDefinitions:
        - AttributeName: "connectionId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "connectionId"
          KeyType: "HASH"
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        AttributeName: "expireAt"
        Enabled: true

  ChatHistoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${ProjectName}-ChatHistory"
      Tags:
        - Key: "Project"
          Value: !Ref ProjectName
      AttributeDefinitions:
        - AttributeName: "sessionId"
          AttributeType: "S"
        - AttributeName: "timestamp"
          AttributeType: "N"
      KeySchema:
        - AttributeName: "sessionId"
          KeyType: "HASH"
        - AttributeName: "timestamp"
          KeyType: "RANGE"
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        AttributeName: "expireAt"
        Enabled: true

  # =================================================================
  # IAM Roles for Lambda
  # - Lambda関数が他のAWSサービス（CloudWatch Logs, DynamoDB, Bedrockなど）にアクセスするために必要な権限を定義したロールです。
  # - AssumeRolePolicyDocumentで、Lambdaサービスがこのロールを引き受ける（Assumeする）ことを許可します。
  # - Policiesで、具体的なアクション（例: DynamoDBへの書き込み）を許可します。最小権限の原則に従うことが重要です。
  # =================================================================
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    DependsOn: WebSocketApi
    Properties:
      RoleName: !Sub "${ProjectName}-LambdaExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "LambdaPermissions"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
              - Effect: "Allow"
                Action:
                  - "dynamodb:PutItem"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:Query"
                Resource:
                  - !GetAtt ConnectionsTable.Arn
                  - !GetAtt ChatHistoryTable.Arn
              - Effect: "Allow"
                Action: "bedrock:InvokeModelWithResponseStream"
                Resource: !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-*"
              - Effect: "Allow"
                Action: "execute-api:ManageConnections"
                Resource: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*"

  # =================================================================
  # Lambda Functions
  # - チャットアプリケーションのバックエンドロジックを実行するサーバーレスコンピューティング環境です。
  # - OnConnect, OnDisconnect, OnMessageの3つの関数で、WebSocketのライフサイクルイベントを処理します。
  # - Codeプロパティで、Lambda関数のソースコードが格納されているS3バケットとキーを指定します。（デプロイ前にコードをzip化してアップロードする必要があります）
  # =================================================================
  OnConnectFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-OnConnectFunction"
      Handler: "on_connect.handler"
      Runtime: "python3.9"
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref LambdaCodeS3Bucket
        S3Key: !Ref LambdaCodeS3Key
      MemorySize: 128
      Timeout: 3
      Tags:
        - Key: "Project"
          Value: !Ref ProjectName

  OnDisconnectFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-OnDisconnectFunction"
      Handler: "on_disconnect.handler"
      Runtime: "python3.9"
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref LambdaCodeS3Bucket
        S3Key: !Ref LambdaCodeS3Key
      MemorySize: 128
      Timeout: 3
      Tags:
        - Key: "Project"
          Value: !Ref ProjectName

  OnMessageFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-OnMessageFunction"
      Handler: "on_message.handler"
      Runtime: "python3.9"
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref LambdaCodeS3Bucket
        S3Key: !Ref LambdaCodeS3Key
      MemorySize: 512
      Timeout: 30
      Tags:
        - Key: "Project"
          Value: !Ref ProjectName

  # =================================================================
  # API Gateway WebSocket API
  # - クライアント（ブラウザ）とバックエンド（Lambda）の間でリアルタイムな双方向通信を実現するためのマネージドサービスです。
  # - ProtocolType: WEBSOCKET を指定します。
  # - RouteSelectionExpressionで、受信メッセージの内容に基づいてどのバックエンドにルーティングするかを決定します。
  # - Routes ($connect, $disconnect, $default) と Integrations (Lambda) を設定し、APIの動作を定義します。
  # =================================================================
  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub "${ProjectName}-WebSocket"
      ProtocolType: "WEBSOCKET"
      RouteSelectionExpression: "$request.body.action"

  # --- Integrations ---
  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: "AWS_PROXY"
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectFunction.Arn}/invocations"

  DisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: "AWS_PROXY"
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectFunction.Arn}/invocations"

  MessageIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: "AWS_PROXY"
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnMessageFunction.Arn}/invocations"

  # --- Routes ---
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: "$connect"
      AuthorizationType: "NONE"
      Target: !Sub "integrations/${ConnectIntegration}"

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: "$disconnect"
      AuthorizationType: "NONE"
      Target: !Sub "integrations/${DisconnectIntegration}"

  MessageRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: "$default"
      AuthorizationType: "NONE"
      Target: !Sub "integrations/${MessageIntegration}"

  # --- Deployment ---
  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ConnectRoute
      - DisconnectRoute
      - MessageRoute
    Properties:
      ApiId: !Ref WebSocketApi

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref WebSocketApi
      StageName: "prod"
      DeploymentId: !Ref Deployment
      AutoDeploy: true

# =================================================================
# Outputs
# - CloudFormationスタックのデプロイ完了後に出力される値です。
# - アプリケーションへのアクセスに必要なURLなどを出力することで、デプロイ後の確認作業が容易になります。
# =================================================================
Outputs:
  WebSocketURL:
    Description: "URL for the WebSocket API"
    Value: !Sub "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/prod"
  CloudFrontURL:
    Description: "URL for the frontend application"
    Value: !GetAtt CloudFrontDistribution.DomainName
